# -*- coding: utf-8 -*-
"""
Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CWJSp3okQrovkL_QHgPrLKHSTjnmFs2U
"""

import cv2
import matplotlib.pyplot as plt
from PIL import Image
import numpy as np
import os

"""#  Exercício 1 - Redimensionamento e Resolução
*feito com PIL*

"""

pil_img = Image.open("sample_data/img.webp").convert("RGB")

img_50 = pil_img.resize((pil_img.width//2, pil_img.height//2), Image.LANCZOS)
img_25 = pil_img.resize((pil_img.width//4, pil_img.height//4), Image.LANCZOS)
img_10 = pil_img.resize((pil_img.width//10, pil_img.height//10), Image.LANCZOS)

img_50.save("output/img_50_pil.jpg")
img_25.save("output/img_25_pil.jpg")
img_10.save("output/img_10_pil.jpg")

fig, axs = plt.subplots(1, 3, figsize=(12, 5))
axs[0].imshow(img_50); axs[0].set_title("50% (PIL)"); axs[0].axis("off")
axs[1].imshow(img_25); axs[1].set_title("25% (PIL)"); axs[1].axis("off")
axs[2].imshow(img_10); axs[2].set_title("10% (PIL)"); axs[2].axis("off")
plt.show()

"""# Exercício 2 - Amostragem
*feito com cv2*



"""

img = cv2.imread("sample_data/img.webp")
h, w = img.shape[:2]

img_small = cv2.resize(img, (32, 32), interpolation=cv2.INTER_NEAREST)
img_up = cv2.resize(img_small, (w, h), interpolation=cv2.INTER_NEAREST)

cv2.imwrite("output/img_32x32_cv2.jpg", img_small)
cv2.imwrite("output/img_reampliada_cv2.jpg", img_up)

img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
img_small_rgb = cv2.cvtColor(img_small, cv2.COLOR_BGR2RGB)
img_up_rgb = cv2.cvtColor(img_up, cv2.COLOR_BGR2RGB)

fig, axs = plt.subplots(1, 3, figsize=(15,5))
axs[0].imshow(img_rgb); axs[0].set_title("Original"); axs[0].axis("off")
axs[1].imshow(img_small_rgb); axs[1].set_title("32x32"); axs[1].axis("off")
axs[2].imshow(img_up_rgb); axs[2].set_title("Reampliada"); axs[2].axis("off")
plt.show()

"""# Exercício 3 - Quantização
*feito com PIL*
"""

img = Image.open("sample_data/img.webp").convert("L")

img_256 = img
img_256.save("output/img_gray_256_pil.png")

img_16 = img.point(lambda x: int(x / 16) * 16)
img_16.save("output/img_gray_16_pil.png")

img_4 = img.point(lambda x: int(x / 64) * 64)
img_4.save("output/img_gray_4_pil.png")

img_2 = img.point(lambda x: 0 if x < 128 else 255)
img_2.save("output/img_gray_2_pil.png")

fig, axs = plt.subplots(1, 5, figsize=(20, 5))
axs[0].imshow(img, cmap='gray'); axs[0].set_title("Original 256"); axs[0].axis('off')
axs[1].imshow(img_16, cmap='gray'); axs[1].set_title("16 níveis"); axs[1].axis('off')
axs[2].imshow(img_4, cmap='gray'); axs[2].set_title("4 níveis"); axs[2].axis('off')
axs[3].imshow(img_2, cmap='gray'); axs[3].set_title("2 níveis"); axs[3].axis('off')
axs[4].imshow(img, cmap='gray'); axs[4].set_title("Original RGB"); axs[4].axis('off')
plt.show()

"""# Exercício 4 - Remoção de canais de cor
*feito com cv2*
"""

img = cv2.imread("sample_data/img.webp")

B, G, R = cv2.split(img)

img_no_R = cv2.merge([B, G, np.zeros_like(R)])
img_no_G = cv2.merge([B, np.zeros_like(G), R])
img_no_B = cv2.merge([np.zeros_like(B), G, R])

cv2.imwrite("output/img_no_R_cv2.png", img_no_R)
cv2.imwrite("output/img_no_G_cv2.png", img_no_G)
cv2.imwrite("output/img_no_B_cv2.png", img_no_B)

img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
img_no_R_rgb = cv2.cvtColor(img_no_R, cv2.COLOR_BGR2RGB)
img_no_G_rgb = cv2.cvtColor(img_no_G, cv2.COLOR_BGR2RGB)
img_no_B_rgb = cv2.cvtColor(img_no_B, cv2.COLOR_BGR2RGB)

fig, axs = plt.subplots(1,4, figsize=(20,5))
axs[0].imshow(img_rgb); axs[0].set_title("Original"); axs[0].axis("off")
axs[1].imshow(img_no_R_rgb); axs[1].set_title("R=0"); axs[1].axis("off")
axs[2].imshow(img_no_G_rgb); axs[2].set_title("G=0"); axs[2].axis("off")
axs[3].imshow(img_no_B_rgb); axs[3].set_title("B=0"); axs[3].axis("off")
plt.show()

"""# Exercício 5 - Escala de Cinza"""

img = Image.open("sample_data/img.webp").convert("L")

img_gray = img.convert("L")

img_gray.save("output/img_gray_pil.png")

plt.imshow(img_gray, cmap="gray")
plt.title("Escala de Cinza (PIL)")
plt.axis("off")
plt.show()